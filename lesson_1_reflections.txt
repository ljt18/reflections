How did viewing a diff between two versions of a file help you see the bug that was
introduced?
	When viewing only the differences between the two files, you can focus on the
	changes, so it will be easier to spot any unintentional error added.

How could having easy access to the entire history of a file make you a more efficient
programmer in the long term?
	Knowing when a functionality was added and how makes it easier to keep track of 
	the changes, you can better know what does each part of the code and have a deeper knowledge of it.

What do you think are the pros and cons of manually choosing when to create a commit, like
you do in Git, vs having versions automatically saved, like Google Docs does?
	Choosing when to commit is useful, specially for code, because you can add a new 
	commit when your new feature is completely implemented, or when your bug is fixed. If commits were created automatically you could have versions of your code that don't make sense, features half-implemented or even code that's not compiling.

Why do you think some version control systems, like Git, allow saving multiple files in 
one commit, while others, like Google Docs, treat each file separately?
	In Git you keep track of a whole project, that often conatin multiple files, so 
	your change can affect different files or a single change to add a feature could involve changes in different files. 

How can you use the commands git log and git diff to view the history of files?
	You use git log to see the history of commits of your project, date of the commit,
	author, id and a message. You can use git diff <commit_id_1> <commit_id_2> to see the differences between these two commits.

How might using version control make you more confident to make changes that could break 
something?
	Using version control you know that there's no problem making changes, if you 
	mess something up you can always go back to the previous state of the code.

Now that you have your workspace set up, what do you want to try using Git for?
	I want to use Git to keep learning creating personal projects, and also to explore
	and have a better understanding of other projects.