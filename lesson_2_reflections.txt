What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository using 'git init' a .git directory is created. You need to initialize your repository so that your program identifies your directory as a repository, also, the .git directory stores a bunch of metadata about the different files and versions.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is just where you place the new or changed files that you want to add in your commit. The working directory is the directory that contains all your files of your project, including .git. The repository is a Git exclusive concept, it only makes sense when using Git and is the whole history of commits of your project.
	The staging area is useful to just make one commit per logical change, so that you can choose which changes will you add to the commit.

How can you use the staging area to make sure you have one commit per logical change?
	You can use 'git diff --stage' to see the differences between the staging area that will define the commit and the last commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When you want to add a new big feature that takes long to implement or when you want to create a different version of your project but you still want keep the actual state of the project and adding features or fixing bugs.

How do the diagrams help you visualize the branch structure?
	Diagrams can help to understend some concepts like, the parent of a commit or branches more visually, without knowing all the details. It is also more intuitive to see the different branches and when they were created.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	We create a new commit with two parents in which both branches merge. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Git can automatically combine two files when new lines have been added or common lines have been deleted which is really useful, but when common parts have the file have been modified in both branches, Git cannot automatically combine the files, is up to you to decide how do you want to manage the changes, in this case, automatic changes could make no sense and your code could not compile.